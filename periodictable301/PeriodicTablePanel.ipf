// Periodic Table Menu// David Niles, J. J. Weimer// Date 2007.04.30// REQUIRES IGOR PRO 5.0x or later#pragma version = 3.01#pragma rtGlobals=1#pragma IgorVersion=5.0#include "xml2igorpro", version=2.03//************************************************************Menu "Macros"	"Periodic Table", PeriodicTable()End//************************************************************// Periodic Table Initialize Globals Structure// version: current version of procedure// ptwidth: base width of panel// ptheight: base height of panel// left: base start for buttons// top: base start for buttons// mtcolor: low, medium, and high settings for colors// scfstr: scale factors to change panel sizeStatic Structure PTPanelInitGlobals	string version	variable ptwidth	variable ptheight	variable left	variable top	variable mtcolor[3]	string scfstrEndStructureStatic Function PTInitGlobals(ptpig)	STRUCT PTPanelInitGlobals &ptpig	ptpig.version="v3.01"	ptpig.ptwidth=260	ptpig.ptheight=175	ptpig.left=10	ptpig.top=10	ptpig.mtcolor[0]=49151	ptpig.mtcolor[1]=53155	ptpig.mtcolor[2]=65535	ptpig.scfstr="\"1;1.25;1.5;2;2.5;\""End//************************************************************// Periodic Table// this is the starting point for putting up the periodic table panelFunction PeriodicTable() : Panel	NVAR gscfpN = root:Packages:PeriodicTablePanel:Globals:scfpN	NVAR gwopN = root:Packages:PeriodicTablePanel:Globals:wopN		if (!DataFolderExists("root:Packages:PeriodicTablePanel"))			// setup a new folder and display panel			if (PTInitPanel())			PTDisplayPanel()		endif	else		// bring an existing panel forward			if (strlen(WinList("PeriodicTablePanel", ";", "WIN:64"))!=0)			DoWindow/F PeriodicTablePanel		else			PTDisplayPanel()			SetActiveSubWindow #PTPDataDisplay			PopupMenu puWhichOne mode=gwopN			SetActiveSubWindow PeriodicTablePanel			PopupMenu PTresize mode=gscfpN		endif	endifEnd//************************************************************// PTInitPanel()// initialize the periodic table panel folders and globalsStatic Function PTInitPanel()		// create new data folder for Periodic Table information		string cdf = GetDataFolder(1)	variable newpanel = 0		if (!DataFolderExists("root:Packages"))		NewDataFolder root:Packages	endif		SetDataFolder("root:Packages")		if (!DataFolderExists("root:Packages:PeriodicTablePanel"))		NewDataFolder/S PeriodicTablePanel		NewDataFolder/S Globals				// create the globals and set them				variable/G scf=1, kill=1, dbflag=0, scfpN = 1, wopN = 1		variable/G ptleft=0, pttop=0, ddhide=0, live=1, exportmode=1		string/G ename="--", database="No Database"		string/G cfield="\"Field\"", cvalue="No Value", cunits="No Units"				SetDataFolder root:Packages:PeriodicTablePanel		NewDataFolder/S GraphMarkerWaves				newpanel = 1	endif		SetDataFolder cdf		return newpanelEnd//************************************************************// PTDisplayPanel()// put up the panel and elementsStatic Function PTDisplayPanel()		NVAR gexportmode = root:Packages:PeriodicTablePanel:Globals:exportmode	NVAR glive = root:Packages:PeriodicTablePanel:Globals:live	NVAR gddhide = root:Packages:PeriodicTablePanel:Globals:ddhide	NVAR gdbflag = root:Packages:PeriodicTablePanel:Globals:dbflag	NVAR gscf = root:Packages:PeriodicTablePanel:Globals:scf	NVAR gptleft = root:Packages:PeriodicTablePanel:Globals:ptleft	NVAR gpttop = root:Packages:PeriodicTablePanel:Globals:pttop	NVAR gkill = root:Packages:PeriodicTablePanel:Globals:kill	SVAR gdatabase = root:Packages:PeriodicTablePanel:Globals:database	SVAR gelement = root:Packages:PeriodicTablePanel:Globals:ename	SVAR gcvalue = root:Packages:PeriodicTablePanel:Globals:cvalue	SVAR gcunits = root:Packages:PeriodicTablePanel:Globals:cunits	SVAR gcfield = root:Packages:PeriodicTablePanel:Globals:cfield		STRUCT PTPanelInitGlobals ptpig		PTInitGlobals(ptpig)		if (!gscf)		gscf = 1	endif		//print ptpig		//return 0		variable ptwidth, ptheight,left,top	variable bw=20*gscf,bh=15*gscf	variable ptddwidth=gscf*120,ptddheight=11*bh	variable clrl=ptpig.mtcolor[0]	variable clrm=ptpig.mtcolor[1]	variable clrh=ptpig.mtcolor[2]	string gscfstr=ptpig.scfstr	string gversion=ptpig.version			ptwidth=gscf*(ptpig.ptwidth+120)	ptheight=gscf*ptpig.ptheight	left=gscf*ptpig.left	top=gscf*ptpig.top		//print "table size is: ", gscf, ptwidth, ptheight, left, top	//return 0		string strgscf = num2str(gscf)			NewPanel/K=(gkill)/W=(gptleft,gpttop,gptleft+ptwidth,gpttop+ptheight)	ModifyPanel cbRGB=(21845,21845,21845), fixedSize=1//,noEdit=1	DoWindow/C/T PeriodicTablePanel,"Periodic Table"//	SetWindow PeriodicTablePanel hook=PTOnCloseHook		SetDrawLayer UserBack		// the element list				Button H0,pos={left,top},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="H"		Button Li0,pos={left,top+bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Li"	Button Na0,pos={left,top+2*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Na"	Button K0,pos={left,top+3*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="K"	Button Rb0,pos={left,top+4*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Rb"	Button Cs0,pos={left,top+5*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Cs"	Button Fr0,pos={left,top+6*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Fr"	Button Be0,pos={left+bw,top+bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Be"	Button Mg0,pos={left+bw,top+2*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Mg"	Button Ca0,pos={left+bw,top+3*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Ca"	Button Sr0,pos={left+bw,top+4*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Sr"	Button Ba0,pos={left+bw,top+5*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Ba"	Button Ra0,pos={left+bw,top+6*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Ra"	Button Sc0,pos={left+2*bw,top+3*bh},size={bw,bh},fColor=(clrh,clrl,clrl),fsize=gscf*12,proc=PTGetState,title="Sc"	Button Ti0,pos={left+3*bw,top+3*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Ti"	Button V0,pos={left+4*bw,top+3*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="V"	Button Cr0,pos={left+5*bw,top+3*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Cr"	Button Mn0,pos={left+6*bw,top+3*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Mn"	Button Fe0,pos={left+7*bw,top+3*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Fe"	Button Co0,pos={left+8*bw,top+3*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Co"	Button Ni0,pos={left+9*bw,top+3*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Ni"	Button Cu0,pos={left+10*bw,top+3*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Cu"	Button Zn0,pos={left+11*bw,top+3*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Zn"	Button Y0,pos={left+2*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Y"	Button Zr0,pos={left+3*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Zr"	Button Nb0,pos={left+4*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Nb"	Button Mo0,pos={left+5*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Mo"	Button Tc0,pos={left+6*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Tc"	Button Ru0,pos={left+7*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Ru"	Button Rh0,pos={left+8*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Rh"	Button Pd0,pos={left+9*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Pd"	Button Ag0,pos={left+10*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Ag"	Button Cd0,pos={left+11*bw,top+4*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Cd"	Button La0,pos={left+2*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="La"	Button Hf0,pos={left+3*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Hf"	Button Ta0,pos={left+4*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Ta"	Button W0,pos={left+5*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="W"	Button Re0,pos={left+6*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Re"	Button Os0,pos={left+7*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Os"	Button Ir0,pos={left+8*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Ir"	Button Pt0,pos={left+9*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Pt"	Button Au0,pos={left+10*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Au"	Button Hg0,pos={left+11*bw,top+5*bh},fColor=(clrh,clrl,clrl),size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Hg"	Button Ac0,pos={left+2*bw,top+6*bh},size={bw,bh},fColor=(clrh,clrl,clrl),fsize=gscf*12,proc=PTGetState,title="Ac"	Button Rf0,pos={left+3*bw,top+6*bh},size={bw,bh},fColor=(clrh,clrl,clrl),fsize=gscf*12,proc=PTGetState,title="Rf"	Button Ha0,pos={left+4*bw,top+6*bh},size={bw,bh},fColor=(clrh,clrl,clrl),fsize=gscf*12,proc=PTGetState,title="Ha"	Button He0,pos={left+17*bw,top},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="He"	Button B0,pos={left+12*bw,top+bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="B"	Button C0,pos={left+13*bw,top+bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="C"	Button N0,pos={left+14*bw,top+bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="N"	Button O0,pos={left+15*bw,top+bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="O"	Button F0,pos={left+16*bw,top+bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="F"	Button Ne0,pos={left+17*bw,top+bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Ne"	Button Al0,pos={left+12*bw,top+2*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Al"	Button Si0,pos={left+13*bw,top+2*bh},size={bw,bh},fColor=(clrh,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Si"	Button P0,pos={left+14*bw,top+2*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="P"	Button S0,pos={left+15*bw,top+2*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="S"	Button Cl0,pos={left+16*bw,top+2*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Cl"	Button Ar0,pos={left+17*bw,top+2*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Ar"	Button Ga0,pos={left+12*bw,top+3*bh},size={bw,bh},fColor=(clrh,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Ga"	Button Ge0,pos={left+13*bw,top+3*bh},size={bw,bh},fColor=(clrh,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Ge"	Button As0,pos={left+14*bw,top+3*bh},size={bw,bh},fColor=(clrh,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="As"	Button Se0,pos={left+15*bw,top+3*bh},size={bw,bh},fColor=(clrh,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Se"	Button Br0,pos={left+16*bw,top+3*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Br"	Button Kr0,pos={left+17*bw,top+3*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Kr"	Button In0,pos={left+12*bw,top+4*bh},size={bw,bh},fColor=(clrh,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="In"	Button Sn0,pos={left+13*bw,top+4*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Sn"	Button Sb0,pos={left+14*bw,top+4*bh},size={bw,bh},fColor=(clrh,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Sb"	Button Te0,pos={left+15*bw,top+4*bh},size={bw,bh},fColor=(clrh,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Te"	Button I0,pos={left+16*bw,top+4*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="I"	Button Xe0,pos={left+17*bw,top+4*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Xe"	Button Tl0,pos={left+12*bw,top+5*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Tl"	Button Pb0,pos={left+13*bw,top+5*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Pb"	Button Bi0,pos={left+14*bw,top+5*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Bi"	Button Po0,pos={left+15*bw,top+5*bh},size={bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="Po"	Button At0,pos={left+16*bw,top+5*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="At"	Button Rn0,pos={left+17*bw,top+5*bh},size={bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="Rn"	Button Ce0,pos={left+4*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Ce"	Button Pr0,pos={left+5*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Pr"	Button Nd0,pos={left+6*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Nd"	Button Pm0,pos={left+7*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Pm"	Button Sm0,pos={left+8*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Sm"	Button Eu0,pos={left+9*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Eu"	Button Gd0,pos={left+10*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Gd"	Button Tb0,pos={left+11*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Tb"	Button Dy0,pos={left+12*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Dy"	Button Ho0,pos={left+13*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Ho"	Button Er0,pos={left+14*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Er"	Button Tm0,pos={left+15*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Tm"	Button Yb0,pos={left+16*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Yb"	Button Lu0,pos={left+17*bw,top+7.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Lu"		Button Th0,pos={left+4*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Th"	Button Pa0,pos={left+5*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Pa"	Button U0,pos={left+6*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="U"	Button Np0,pos={left+7*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Np"	Button Pu0,pos={left+8*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Pu"	Button Am0,pos={left+9*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Am"	Button Cm0,pos={left+10*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Cm"	Button Bk0,pos={left+11*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Bk"	Button Cf0,pos={left+12*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Cf"	Button Es0,pos={left+13*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Es"	Button Fm0,pos={left+14*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Fm"	Button Md0,pos={left+15*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Md"	Button No0,pos={left+16*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="No"	Button Lr0,pos={left+17*bw,top+8.5*bh},size={bw,bh},fsize=gscf*12,proc=PTGetState,title="Lr"		// metals, transition metals, semiconductors, non-metals		Button MT0,pos={left,top+7.5*bh},size={1.5*bw,bh},fColor=(clrl,clrm,clrh),fsize=gscf*12,proc=PTGetState,title="MT"	Button TR0,pos={left+1.5*bw,top+7.5*bh},size={1.5*bw,bh},fColor=(clrh,clrl,clrl),fsize=gscf*12,proc=PTGetState,title="TR"	Button ML0,pos={left,top+8.5*bh},size={1.5*bw,bh},fColor=(clrh,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="ML"	Button NM0,pos={left+1.5*bw,top+8.5*bh},size={1.5*bw,bh},fColor=(clrl,clrh,clrl),fsize=gscf*12,proc=PTGetState,title="NM"	// controls	PopupMenu PTresize,pos={left+12,top+9.5*bh},size={83,20},proc=PTResizePanel,title="Scale"	PopupMenu PTresize,help={"Use this to resize the panel."},fSize=12,fStyle=1	PopupMenu PTresize,mode=1,bodywidth=50,popvalue=strgscf,value=#gscfstr	SetDrawLayer UserBack	DrawRect left+1,top+9.5*bh,left+50,top+9.5*bh+18	TitleBox tbVer fsize=gscf*8,fColor=(65535,65535,65535),frame=0,title=gversion	TitleBox tbVer pos={left+15*bw,top+10*bh}	TitleBox tbPElement pos={left+gscf*50,top},fstyle=1,fsize=gscf*14,frame=2	TitleBox tbPElement labelBack=(65535,65535,65535),variable=gelement	TitleBox vdthePStrValue fSize=gscf*10,help={"This displays the values"}	TitleBox vdthePStrValue pos={left+gscf*85,top-5},variable=gcvalue, labelBack=(65535,65535,65535)	TitleBox vdthePStrUnits fSize=gscf*10,help={"This displays the units"}	TitleBox vdthePStrUnits pos={left+gscf*85,top+gscf*15},variable=gcunits, labelBack=(65535,65535,65535)	TitleBox vdthePStrValue disable=!gddhide	TitleBox vdthePStrUnits disable=!gddhide	TitleBox tbPelement disable=!gddhide	Button buShowHide,pos={left+17*bw,top+9.5*bh},size={gscf*20,gscf*15},title="<>"	Button buShowHide, fColor=(clrl,60031,clrh),fSize=gscf*10, proc=PTShowHideDataDisplay		PopupMenu puPanelMode,pos={left+100,top+9.5*bh},size={gscf*70,gscf*24},title=""	PopupMenu puPanelMode,help={"This selects the mode for displaying values"},value="Live;One Click;"	PopupMenu puPanelMode,mode=glive,bodywidth=0, proc=PTChangeMode	PopupMenu puPExportMode,pos={left+8.5*bw,top+gscf*20},size={gscf*50,gscf*24},title=""	PopupMenu puPExportMode,help={"This selects where to export the value"}, proc=PTChangeExportMode	PopupMenu puPExportMode,mode=gexportmode,bodywidth=0, value="Clip;Graph;Notebk;", disable=!gddhide	Button bcPExport title="->",pos={left+13*bw,top-2},size={gscf*25,gscf*15},fSize=9*gscf	Button bcPExport fColor=(clrl,60031,clrh), disable=!gddhide, proc=bcPTExportValue		// the subwindow	//	NewPanel/W=(0.75,0.02,0.99,0.98)/HOST=# 	NewPanel/EXT=0/W=(0,0,0.3*ptwidth,0)/HOST=# 	RenameWindow #,PTPDataDisplay	ModifyPanel frameStyle=0, frameInset=1//	Button loadDB title="Load DB",pos={left-5,top+gscf*130},size={gscf*50,gscf*20},fSize=10*gscf	Button loadDB title="Load DB",pos={left-gscf*5,top-gscf*5},size={gscf*45,gscf*15}	Button loadDB proc=PTLoadDB,fColor=(clrl,60031,clrh),fSize=9*gscf	TitleBox tbDatabase fsize=gscf*12,pos={left-gscf*5,top+gscf*10},frame=0,variable=gdatabase	TitleBox tbElement pos={left,top+gscf*30},fstyle=1,fsize=gscf*14,frame=2,variable=gelement	PopupMenu puWhichOne,pos={left+gscf*45,top+gscf*60},size={gscf*50,gscf*24},title=""	PopupMenu puWhichOne,help={"This selects the field to show fom the database"},popValue="No State"	PopupMenu puWhichOne,mode=1,bodywidth=gscf*100,value=#gcfield, proc=PTchangeField	TitleBox vdtheStrValue fSize=gscf*9,help={"This displays the values"}	TitleBox vdtheStrValue pos={left-gscf*8,top+gscf*105},variable=gcvalue	TitleBox vdtheStrUnits fSize=gscf*9,help={"This displays the units"}	TitleBox vdtheStrUnits pos={left,top+gscf*125},variable=gcunits	PopupMenu puExportMode,pos={left-8,top+gscf*145},size={gscf*50,gscf*24},title=""	PopupMenu puExportMode,help={"This selects where to export the value"}, proc=PTChangeExportMode	PopupMenu puExportMode,mode=gexportmode,bodywidth=0, value="Clip;Graph;Notebk;"	Button bcExport title="->",pos={left+3.75*bw,top+gscf*145},size={gscf*25,gscf*15},fSize=9*gscf	Button bcExport fColor=(clrl,60031,clrh), proc=bcPTExportValue		SetActiveSubwindow PeriodicTablePanel	SetWindow #PTPDataDisplay, hide=gddhideEnd//************************************************************// Change Export ModeFunction PTChangeExportMode(pa) : PopupMenuControl	STRUCT WMPopupAction &pa	NVAR gexportmode = root:Packages:PeriodicTablePanel:Globals:exportmode	switch(pa.eventCode)	case 2:		if (gexportmode!=pa.popNum)			gexportmode = pa.popNum			if (gexportmode==2)				SetActiveSubWindow #PTPDataDisplay				PopupMenu puExportMode,mode=pa.popNum								Button bcExport title="<->"				SetActiveSubWindow PeriodicTablePanel				PopupMenu puPExportMode,mode=pa.popNum				Button bcPExport title="<->"			else				SetActiveSubWindow #PTPDataDisplay				PopupMenu puExportMode,mode=pa.popNum								Button bcExport title="->"				SetActiveSubWindow PeriodicTablePanel				PopupMenu puPExportMode,mode=pa.popNum				Button bcPExport title="->"			endif		endif		SetActiveSubWindow $pa.win	endswitch	return 0End//************************************************************// Change Panel ModeFunction PTChangeMode(pa) : PopupMenuControl	STRUCT WMPopupAction &pa	NVAR glive = root:Packages:PeriodicTablePanel:Globals:live	switch(pa.eventCode)	case 2:		ControlInfo/W=PeriodicTablePanel puPanelMode		if (pa.popNum!=V_value)			PopupMenu puPanelMode,mode=pa.popNum		endif				glive = pa.popNum	endswitch	return 0End//************************************************************// Change a FieldFunction PTChangeField(pa) : PopupMenuControl	STRUCT WMPopupAction &pa	SVAR gelement=root:Packages:PeriodicTablePanel:Globals:ename	NVAR gwopN = root:Packages:PeriodicTablePanel:Globals:wopN	switch(pa.eventCode)	case 2:		ControlInfo/W=#PTPDataDisplay puWhichOne		if (pa.popNum!=V_value)			SetActiveSubWindow #PTPDataDisplay			PopupMenu puWhichOne,mode=pa.popNum			SetActiveSubWindow PeriodicTablePanel		endif				gwopN = pa.popNum				string theElement = gelement + "0"		STRUCT WMButtonAction bs		bs.ctrlName = theElement		bs.eventCode = 2		PTGetState(bs)		return 0	endswitchEnd//************************************************************// Resize PT PanelFunction PTResizePanel(pa) : PopupMenuControl	STRUCT WMPopupAction &pa		NVAR gscf = root:Packages:PeriodicTablePanel:Globals:scf	NVAR gscfpN = root:Packages:PeriodicTablePanel:Globals:scfpN	NVAR gwopN = root:Packages:PeriodicTablePanel:Globals:wopN	NVAR gdbflag = root:Packages:PeriodicTablePanel:Globals:dbflag		// wait for mouse up event		switch(pa.eventCode)	case 2:		// if no change in scale factor, no change in panel				if (pa.popNum==gscfpN)			return 0		endif				// store current states				gscfpN = pa.popNum		ControlInfo/W=#PTPDataDisplay puWhichOne		gwopN = V_value				// redraw panel at new scale factor				gscf = str2num(pa.popStr)					KillWindow PeriodicTablePanel		PTDisplayPanel()		PopupMenu PTresize mode=gscfpN				// reselect the element if database exists				if (gdbflag)			STRUCT WMPopupAction pu			pu.eventCode=2			pu.popNum=gwopN			PTchangeField(pu)		endif		return 0	endswitchEnd//************************************************************// Show/Hide Data DisplayFunction PTShowHideDataDisplay(bc) : ButtonControl	STRUCT WMButtonAction &bc	NVAR gddhide = root:Packages:PeriodicTablePanel:Globals:ddhide	switch(bc.eventCode)	case 2:			gddhide=!gddhide			SetActiveSubWindow PeriodicTablePanel						SetWindow #PTPDataDisplay, hide=gddhide			TitleBox tbPelement disable=!gddhide			TitleBox vdthePStrValue disable=!gddhide			TitleBox vdthePStrUnits disable=!gddhide			PopupMenu puPExportMode disable=!gddhide			Button bcPExport disable=!gddhide	endswitchEnd//************************************************************// Periodic Table Load DataBaseFunction PTLoadDB(bc) : ButtonControl	STRUCT WMButtonAction &bc		NVAR gdbflag =  root:Packages:PeriodicTablePanel:Globals:dbflag	SVAR gDBfolder = root:Packages:PeriodicTablePanel:Globals:database	SVAR gcfield = root:Packages:PeriodicTablePanel:Globals:cfield	switch(bc.eventCode)	case 2:			// get the XSL file name (with path)				string bfname, xslfname, xsldbname, xmlfname, xmldbname		variable pd, pc				Open/D/R/M="Select the database style sheet (.xsl extension)"/T=".xsl" refNum				xslfname=S_filename				// set the possible XML filename (with path)				bfname=RemoveEnding(xslfname,".xsl")		pd=strsearch(bfname,"_",0)		if (pd<0)			pd=strlen(bfname)		endif		xmlfname = bfname[0,pd-1] + ".xml"		// set the data folders				pc=strsearch(bfname,":",strlen(bfname)-1,1)		xsldbname = bfname[pc+1,strlen(bfname)-1]		xmldbname = bfname[pc+1,pd-1]				string xsldf = "root:Packages:XML2IgorPro:" + xsldbname		string xmldf = "root:" + xmldbname		string cdf = GetDataFolder(1)				if (!DatafolderExists(xmldf))			NewDataFolder $xmldf		endif		// input the XSL and XML files							if(inputXSLFile(xsldbname,filepath=xslfname)>0)			if(inputXMLFile(2,xmldbname,xsldbname,KEY="symbol",filepath=xmlfname)>0)			else				KillDataFolder $xmldf				return 0			endif		else			KillDataFolder $xmldf			return 0		endif					gDBfolder = xmldbname			// set the list of waves loaded				SetDataFolder $xmldf		gcfield ="\"" +  WaveList("*",";","") + "\""		SetActiveSubWindow #PTPDataDisplay			PopupMenu puWhichOne,mode=1,value=#gcfield		SetActiveSubWindow PeriodicTablePanel			// return home						SetDataFolder $cdf				gdbflag=1				return 0	endswitch	End//************************************************************// Periodic Table Get State// this button procedure is called whenever an element button// is entered, left, or pushedFunction PTGetState(bs) : ButtonControl	STRUCT WMButtonAction &bs		NVAR glive = root:Packages:PeriodicTablePanel:Globals:live	NVAR gdbflag = root:Packages:PeriodicTablePanel:Globals:dbflag	SVAR gelement=root:Packages:PeriodicTablePanel:Globals:ename	SVAR gdatabase = root:Packages:PeriodicTablePanel:Globals:database	SVAR gcvalue = root:Packages:PeriodicTablePanel:Globals:cvalue	SVAR gcunits = root:Packages:PeriodicTablePanel:Globals:cunits		//print bs		switch(bs.eventCode)		case -1:			return 0		case 1:		case	2:			break		case 3:		case 4:			return 0		case 5:			if (glive==1)				break			else				return 0			endif		case 6:			return 0	endswitch		// no database, no action!		if (!gdbflag)		return 0	endif	// set the database directory		string df = "root:" + gdatabase +":"		// return if symbol wave is non-existent		string theWave = df + "SYMBOL"	if (!exists(theWave))		return 0	endif	SetActiveSubWindow PeriodicTablePanel		// set the title to show the element		string rootName = bs.ctrlName	gelement=rootName[0,strlen(rootName)-2]		// find the position of the element in the symbol wave		wave dbwave = $theWave	FindValue/TEXT=gelement/TXOP=4 dbwave		// note the position of the element if found	// otherwise, return "no value", "no units"		variable ic		if (V_value>=0)		ic = V_value	else		gcvalue = "no value"		gcunits = "no units"		return 0	endif	// determine what value to display		ControlInfo/W=#PTPDataDisplay puWhichOne	if (V_flag<=0)		PopupMenu puWhichOne,mode=1		ControlInfo/W=#PTPDataDisplay puWhichOne	endif		// find the wave that has that value	theWave = df + S_Value	if (WaveType($theWave) == 0)		wave/T poTwave = $theWave		gcvalue = poTwave[ic]	else		wave powave = $theWave		if (numtype(powave[ic])==2)			gcvalue = "no value"		else			gcvalue = num2str(powave[ic])		endif	endif		// determine whether value has units		theWave += "UNITS"	if (exists(theWave)>0)		SVAR cu = $theWave		gcunits = cu	else		gcunits = "no units"	endif//	variable togstate = str2num(ctrlName[strlen(ctrlName)-1,strlen(ctrlName)])		// set the element in its title box	//print rootname		// toggle on/off when button is pushed	//	switch(togstate)//		case 0://			bName = gelement + "1"//			Button $ctrlName fstyle=25//			break//		case 1://			bName = gelement + "0"//			Button $ctrlName fstyle=0//	endswitch	return 1end//************************************************************// Export ValueFunction bcPTExportValue(bc) : ButtonControl	STRUCT WMButtonAction &bc			SVAR gelement=root:Packages:PeriodicTablePanel:Globals:ename	SVAR gcvalue = root:Packages:PeriodicTablePanel:Globals:cvalue	SVAR gcunits = root:Packages:PeriodicTablePanel:Globals:cunits	NVAR gexportmode = root:Packages:PeriodicTablePanel:Globals:exportmode		switch(bc.eventCode)	case 2:		switch(gexportmode)			case 1: // to clip				string theOutput						ControlInfo/W=#PTPDataDisplay puWhichOne						theOutput = gelement + ":" + S_value + " " + gcvalue + " " + gcunits				putscraptext theOutput				break			case 2: // to graph						if(GrepString(gcvalue,"(?)[a-z]+"))					DoAlert 0, "String values cannot be pasted on graph"					break				endif				variable theValue				sscanf gcvalue, "%g", theValue								if(DoPTGraphOutput(gelement,theValue)==0)					DoAlert 0, "No value pasted to graph"				endif				break			case 3: // to notebook				ControlInfo/W=#PTPDataDisplay puWhichOne						if(DoPTNotebookOutput(gelement,S_value,gcvalue,gcunits)==0)					DoAlert 0, "No value pasted to notebook"				endif				break			endswitch	endswitch	return 0End//************************************************************// Periodic Table Value to graphFunction DoPTGraphOutput(gelement,gcvalue)	string gelement	variable gcvalue					string theWindows="", theFirstWindow, theCDF=GetDataFolder(1)	string theGraphTraces		theWindows=WinList("*",";","WIN:1")	if (strlen(theWindows)==0)		return 0	endif		theFirstWindow=StringFromList(0,theWindows)		GetAxis/W=$theFirstWindow/Q bottom			if ((gcvalue>V_min) && (gcvalue<V_max))		DoWindow/F $theFirstWindow		theGraphTraces=TraceNameList("",";",1)		if (FindListItem(gelement,theGraphTraces)<0)			GetAxis/W=$theFirstWindow/Q left	//		TextBox/C/N=$gelement/A=LB/F=0/X=(thepercent)/Y=50.00/E=0 gelement			SetDataFolder root:Packages:PeriodicTablePanel:GraphMarkerWaves			make/o/n=1 $gelement=0.5*V_max			SetScale/P x gcvalue,1,"", $gelement			AppendToGraph $gelement			ModifyGraph mode($gelement)=1,lsize($gelement)=2, rgb($gelement)=(0,0,0)			Tag/C/N=$gelement/F=0/A=MB/L=0/X=0.00/Y=0.00 $gelement, 12, gelement			SetDataFolder $theCDF		else			RemoveFromGraph $gelement		endif		DoWindow/F PeriodicTablePanel	endif	return 1End//************************************************************// Periodic Table Value to notebookFunction DoPTNotebookOutput(gelement,whichvalue,gcvalue,gcunits)	string gelement,whichvalue,gcvalue,gcunits					string theWindows="", theFirstWindow, theResult		theWindows=WinList("*",";","WIN:16")	if (strlen(theWindows)==0)		return 0	endif		theFirstWindow=StringFromList(0,theWindows)	theResult = gelement + ":" + whichvalue + " " + gcvalue + " " + gcunits		DoWindow/F $theFirstWindow	Notebook $theFirstWindow text=theResult	return 1End