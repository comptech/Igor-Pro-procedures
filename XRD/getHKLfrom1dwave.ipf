#pragma rtGlobals=1		// Use modern global access method.function gethkl(w,i,h,k,l)wave wvariable i,h,k,l//wave should be filled with 4 digit numbers in the form 1hkl//i=row numberh=floor((w[i] -1000)/100)k=floor((w[i] -1000-(h)*100)/10)l=floor(w[i] -1000-(h)*100-k*10)return(0)end	//=============================function geth(w,i)wave wvariable i//wave should be filled with 4 digit numbers in the form 1hkl//i=row numbervariable hh=floor((w[i] -1000)/100)return(h)end	//=============================function getk(w,i)wave wvariable i//wave should be filled with 4 digit numbers in the form 1hkl//i=row numbervariable h,kh=floor((w[i] -1000)/100)k=floor((w[i] -1000-(h)*100)/10)return(k)end	//=============================function getl(w,i)wave wvariable i//wave should be filled with 4 digit numbers in the form 1hkl//i=row numbervariable h,k,lh=floor((w[i] -1000)/100)k=floor((w[i] -1000-(h)*100)/10)l=floor(w[i] -1000-(h)*100-k*10)return(l)end	//===========================================function dspOrtho(hkl,abc)wave hkl,abc	//hkl is in 1d formatvariable dd=1/sqrt( (geth(hkl,p)/abc[0])^2+(getk(hkl,p)/abc[1])^2+(getl(hkl,p)/abc[2])^2)return(d)end//===========================================function dspCubic(hkl,abc)wave hkl,abc	//hkl is in 1d formatvariable dd=1/sqrt( (geth(hkl,p)/abc[0])^2+(getk(hkl,p)/abc[0])^2+(getl(hkl,p)/abc[0])^2)return(d)end//===========================================function dspHex(hkl,abc)wave hkl,abc	//hkl is in 1d formatvariable d// (4.0/3.0)*((h*h + h*k + k*k)/(a*a)) + (l*l)/(c*c)d=1/sqrt((4/3)* (geth(hkl,p)^2+geth(hkl,p)*getk(hkl,p)+getk(hkl,p)^2)/(abc[0])^2++(getl(hkl,p)/abc[2])^2)return(d)end//===========================================function write1dhkl(hkl,integer)wave hklvariable integervariable h,k,l,row,lengthinitlengthinit=(integer+1)^3redimension/n=(lengthinit) hklh=0do	k=0	do		l=0		do				hkl[row]=1000+100*h+10*k+l		row+=1		l+=1		while(l<=integer)	k+=1	while(k<=integer)h+=1while(h<=integer)redimension/n=(row+1) hklend	//=======================================function write1dhklHEX(hkl,integer)wave hklvariable integervariable h,k,l,row,lengthinitlengthinit=(integer+1)^3redimension/n=(lengthinit) hklh=0do	k=0	do		l=0		do		hkl[row]=1000+100*h+10*k+l		row+=1		l+=1		while(l<=integer)	k+=1	while(k<=h)h+=1while(h<=integer)redimension/n=(row+1) hklend	//=======================================//function dspHexfit(hkl,abc)Function HexFit1d(w,x) : FitFunc	Wave w		//coef wave =abc	Variable x	//has to get hklvariable h,k,l,dh=floor((x -1000)/100)k=floor((x -1000-(h)*100)/10)l=floor(x -1000-(h)*100-k*10)// (4.0/3.0)*((h*h + h*k + k*k)/(a*a)) + (l*l)/(c*c)d=1/sqrt((4/3)* (h^2+h*k+k^2)/(w[0])^2+(l/w[2])^2)return(d)end//===========================================Function CubicFit1d(w,x) : FitFunc	Wave w		//coef wave =abc	Variable x	//has to get hklvariable h,k,l,dh=floor((x -1000)/100)k=floor((x -1000-(h)*100)/10)l=floor(x -1000-(h)*100-k*10)d=1/sqrt( (h/w[0])^2+(k/w[0])^2+(l/w[0])^2)return(d)end//===========================================Function OrthoFit1d(w,x) : FitFunc	Wave w		//coef wave =abc	Variable x	//has to get hklvariable h,k,l,dh=floor((x -1000)/100)k=floor((x -1000-(h)*100)/10)l=floor(x -1000-(h)*100-k*10)d=1/sqrt( (h/w[0])^2+(k/w[1])^2+(l/w[2])^2)return(d)end