#pragma rtGlobals=1		// Use modern global access method.Menu "Macros"	SubMenu "Editing files for DiffractionCalc"		"Input_New_Dspace_Data"		"Edit_Preexisting_Dspace_Data"		"Make_Dspace_file"		"XLMaker_2_DiffractionCalc"	EndEndMacro Input_New_Dspace_Data(XL_System,Filename)	String XL_System	String Filename	Prompt Filename, "Filename:"	Prompt XL_System, "Crystal System:", popup, "Cubic;Orthorhombic;Tetragonal;Hexagonal;Monoclinic;Rhombohedral;Triclinic"	Input_Data_Table(Filename,XL_System)EndMacro Edit_Preexisting_Dspace_Data(Old_Filename,New_Filename)	String Old_Filename, New_Filename = "Keep the same Name"	Prompt Old_Filename, "File to edit:",popup, wavelist("*",";","")	Prompt New_Filename, "New file name:"	Edit_Data_Table(Old_Filename,New_Filename)EndMacro Make_Dspace_file(ID_name)	String ID_name	Prompt ID_name, "Identify your data:",popup, wavelist("ID*",";","")	Make_Dspace_file_function($ID_name)EndFunction Input_Data_Table(Filename, XL_System)	String Filename, XL_System		Make/O/N=1/D $(Filename+"_h")	wave h = $(Filename+"_h")	Make/O/N=1/D $(Filename+"_k")	wave k = $(Filename+"_k")	Make/O/N=1/D $(Filename+"_l")	wave l = $(Filename+"_l")	Make/O/N=1/D $(Filename+"_int")	wave int = $(Filename+"_int")	Make/O/N=2/D $(Filename+"_EOS")	wave EOS = $(Filename+"_EOS")	Make/O/N=6/D $(Filename+"_Params")	wave Params = $(Filename+"_Params")		Make/O/N=2/T $("EOS_Labels") = {"K","Kprime"}	Make/O/N=6/T $("Lattice_Labels") = {"a","b","c","alpha","beta","gamma"}		Edit h,k,l,int,EOS_Labels,EOS,Lattice_Labels,Params as Filename+"_Data"	Save_Identifier(Filename, XL_System)EndFunction Save_Identifier(Filename,XL_System)	String Filename, XL_System	Make/O/N=2/T $("ID_"+Filename) = {Filename, XL_System}EndFunction Edit_Data_Table(Old_Filename,New_Filename)	String Old_Filename, New_Filename	String Filename, XL_System		if (cmpstr(New_Filename,"Keep the same Name")==0)		Filename = Old_Filename	else		Filename = New_Filename	endif	Wave w = $(Old_Filename)	Variable Filesize = numpnts($(Old_Filename))	Variable Num_Refls = (Filesize - 16) / 4		Make/O/N=(Num_Refls)/D $(Filename+"_h")	wave h = $(Filename+"_h")	Make/O/N=(Num_Refls)/D $(Filename+"_k")	wave k = $(Filename+"_k")	Make/O/N=(Num_Refls)/D $(Filename+"_l")	wave l = $(Filename+"_l")	Make/O/N=(Num_Refls)/D $(Filename+"_int")	wave int = $(Filename+"_int")	Make/O/N=2/D $(Filename+"_EOS")	wave EOS = $(Filename+"_EOS")	Make/O/N=6/D $(Filename+"_Params")	wave Params = $(Filename+"_Params")	// Crystal System	if (w[0] == 1)		XL_System = "Cubic"	elseif (w[0] == 2)		XL_System = "Orthorhombic"	elseif (w[0] == 3)		XL_System = "Tetragonal"	elseif (w[0] == 4)		XL_System = "Hexagonal"	elseif (w[0] == 5)		XL_System = "Monoclinic"	elseif (w[0] == 6)		XL_System = "Rhombohedral"	elseif (w[0] == 7)		XL_System = "Triclinic"	endif		// Lattice Parameters	Params[0] = w[1] // a	Params[1] = w[2] // b	Params[2] = w[3] // c	Params[3] = w[4] // alpha	Params[4] = w[5] // beta	Params[5] = w[6] // gamma		// Equation of State	EOS[0] = w[7]	EOS[1] = w[8]		// Lattice Parameters	variable i = 0	do		h[i] = w[16+4*i]		k[i] = w[17+4*i] 		l[i] = w[18+4*i]		int[i] = w[19+4*i]		i += 1	while (i < Num_Refls)		Make/O/N=2/T $("EOS_Labels") = {"K","Kprime"}	Make/O/N=6/T $("Lattice_Labels") = {"a","b","c","alpha","beta","gamma"}		Edit h,k,l,int,EOS_Labels,EOS,Lattice_Labels,Params as Filename+"_Data"	Save_Identifier(Filename,XL_System)EndFunction Make_Dspace_file_function(ID_name)	Wave/T ID_name	String Filename = ID_name[0]	String XL_System = ID_name[1]	Variable Num_Refls = numpnts($(Filename+"_int"))	Variable Filesize = 16+4*(Num_Refls)	Make/O/D/N=(Filesize) $Filename	wave w = $Filename		// Crystal System	if (cmpstr(XL_System,"Cubic")==0)  		w[0] = 1	elseif (cmpstr(XL_System,"Orthorhombic")==0)		w[0] = 2	elseif (cmpstr(XL_System,"Tetragonal")==0)		w[0] = 3	elseif (cmpstr(XL_System,"Hexagonal")==0)		w[0] = 4	elseif (cmpstr(XL_System,"Monoclinic")==0)		w[0] = 5	elseif (cmpstr(XL_System,"Rhombohedral")==0)		w[0] = 6	elseif (cmpstr(XL_System,"Triclinic")==0)		w[0] = 7	endif		// Lattice Parameters	wave Params = $(Filename+"_Params") 	w[1] = Params[0] // a		w[2] = Params[1] // b	w[3] = Params[2] // c	w[4] = Params[3] // alpha	w[5] = Params[4] // beta	w[6] = Params[5] // gamma		// Equation of State	wave EOS = $(Filename+"_EOS") 	w[7] = EOS[0] // K0	w[8] = EOS[1] // K prime	w[9] = 0 // This could be K''		// Number of reflections	w[10] = Num_Refls		// Not sure what these are	w[11] = 0 	w[12] = 0	w[13] = 0	w[14] = 0	w[15] = 0		// h,k,l's and intensities	wave h = $(Filename+"_h")	wave k = $(Filename+"_k")	wave l = $(Filename+"_l") 	wave int = $(Filename+"_int")		variable i = 0	do		w[16+4*i] = h[i]		w[17+4*i] = k[i]		w[18+4*i] = l[i]		w[19+4*i] = int[i]		i += 1	while (i < Num_Refls)		killwaves/Z $(Filename+"_h"),$(Filename+"_k"),$(Filename+"_l"),$(Filename+"_int")	killwaves/Z $(Filename+"_Params"),$(Filename+"_EOS")	killwaves/Z EOS_Labels, Lattice_Labels		if (WaveExists($(Filename+"_h")) != 1)		killwaves $("ID_"+Filename)	endif	EndFunction XLMaker_2_DiffractionCalc()	Extract_XLMaker_Listing()	//Edit h,k,l, Intensity, Parameters	//Execute "Input_New_Dspace_Data()"	String XL_System = ""	String Filename  = ""		Prompt Filename, "Filename:"	String crystallist = "Cubic;Orthorhombic;Tetragonal;"	crystallist +=  "Hexagonal;Monoclinic;Rhombohedral;Triclinic"	Prompt XL_System, "Crystal System:", popup crystallist		DoPrompt "Title", Filename, XL_System		Wave h,k,l,Intensity, Parameters	Duplicate/O h $(Filename+"_h")	Wave wh = $(Filename+"_h")	Duplicate/O k $(Filename+"_k")	Wave wk = $(Filename+"_k")	Duplicate/O l $(Filename+"_l")	Wave wl = $(Filename+"_l")	Duplicate/O Intensity $(Filename+"_int")	Wave wIntensity = $(Filename+"_int")	Make/O/N=2/D $(Filename+"_EOS")	Wave wEos = $(Filename+"_EOS")	Duplicate/O Parameters  $(Filename+"_Params")	Wave wParams = $(Filename+"_Params")				Make/O/N=2/T $("EOS_Labels") = {"K","Kprime"}	Wave wLabels1 = $("EOS_Labels")	Make/O/N=6/T $("Lattice_Labels") = {"a","b","c","alpha","beta","gamma"}	Wave wLabels2 = $("Lattice_Labels")		Sort /R wIntensity, wIntensity, wh, wk, wl		Edit wh,wk,wl,wIntensity,wLabels1,wEos,wLabels2,wParams	Save_Identifier(Filename, XL_System)		killwaves Parameters, h, k, l, dspacing, IntensityEnd	Function Extract_XLMaker_Listing()	Variable refNum	Open/R refNum	String filename = S_fileName	Close refNum	LoadLatticeParams(filename)	LoadReflections(filename, "ref no.")EndFunction LoadLatticeParams(filename)	String filename	String stopsign1 = "     a =", stopsign2 = " alpha ="//	Wave Parameters	Make/N=6/D/O Parameters	Variable a, b, c, alpha, beta, gam, strnposition		Variable refNum	Open/R refNum as fileName		String buffer, text	do		FReadLine refNum, buffer		if (strlen(buffer) == 0)			Close refNum			return -1						// Error: No more data.		endif				text = buffer[0,(strlen(stopsign1) - 1)]		if (CmpStr(text, stopsign1) == 0)			strnposition = strsearch(buffer,"a =",0)			a = str2num(buffer[(strnposition + 4), strnposition + 14])			strnposition = strsearch(buffer,"b =",0)			b = str2num(buffer[(strnposition + 4), strnposition + 14])			strnposition = strsearch(buffer,"c =",0)			c = str2num(buffer[(strnposition + 4), strnposition + 14])		endif				text = buffer[0,(strlen(stopsign2) - 1)]		if (CmpStr(text, stopsign2) == 0)			strnposition = strsearch(buffer,"alpha =",0)			alpha = str2num(buffer[(strnposition + 8), strnposition + 14])			strnposition = strsearch(buffer,"beta =",0)			print strnposition			beta = str2num(buffer[(strnposition + 8), strnposition + 14])			strnposition = strsearch(buffer,"gamma =",0)			gam = str2num(buffer[(strnposition + 7), strnposition + 14])			Close refNum			break		endif	while(1)	Parameters = {a, b, c, alpha, beta, gam}	End		Function LoadReflections(filename, stopsign)	String filename, stopsign	Variable line =  FindFirstDataLine(filename, "ref no.") + 2		String columnInfoStr = ""	columnInfoStr +=  "N='_skip_',W=15,F=2;"	columnInfoStr +=  "N='h',W=4,F=2;"	columnInfoStr +=  "N='k',W=4,F=2;"	columnInfoStr +=  "N='l',W=4,F=2;"	columnInfoStr +=  "N='dspacing',W=11,F=2;"	columnInfoStr +=  "N='_skip_',W=23,F=2;"	columnInfoStr +=  "N='Intensity',W=5,F=2;"	columnInfoStr +=  "N='_skip_',W=5,F=2;"	LoadWave /L={0,line,0,0,0} /B=columnInfoStr /D /O /F={8,5,0} /A filenameEndFunction FindFirstDataLine(fileName, stopsign)	String fileName			// Name of file (including full path).	String stopsign			// String for which knowing its line will indicate line of interest		Variable refNum	Open/R refNum as fileName		String buffer, text	Variable line = 0		do		FReadLine refNum, buffer		if (strlen(buffer) == 0)			Close refNum			return -1						// Error: No more data.		endif		text = buffer[0,(strlen(stopsign) - 1)]		if (CmpStr(text, stopsign) == 0)			Close refNum			return line						// Success: This is the line.		endif		line += 1	while(1)		return -3		// We will never get here.End